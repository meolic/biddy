#
# MODULE main
# VAR
#   request : boolean;
#   state : {ready,busy};
# ASSIGN
#   init(state) := ready;
#   next(state) := case
#                    state = ready & request : busy;
#                    1 : {ready,busy};
#                  esac;
# SPEC
#   AG(request -> AF state = busy)
# 

MODULE short
INPUT STATE_VAR_ASSOCIATE_CURR_NEXT_INTERLEAVE
         v0,         v1,         v2,         v3;
OUTPUT
         lv_8,      lv_10,      lv_12,      lv_14,      lv_17,
        lv_18,      lv_19,      lv_65;
STRUCTURE
   false = new_int_leaf(0);   % 1
   true = new_int_leaf(1);   % 1
   trace_verbose_print("Registering quantifiers (curr/next vars)");
   trace_verbose_print("  Reconstruction 0...");
   lv_1 = ite(v2, true, false);   % 3
   lv_2 = ite(v0, lv_1, false);   % 4
   trace_verbose_print("  Done reconstruction 0.");
   trace_verbose_print("  Reconstruction 1...");
   lv_3 = ite(v3, true, false);   % 3
   lv_4 = ite(v1, lv_3, false);   % 4
   trace_verbose_print("  Done reconstruction 1.");
   trace_verbose_print("Registering the INIT function.");
   trace_verbose_print("  Reconstruction 2...");
   lv_5 = ite(v2, false, true);   % 3
   trace_verbose_print("  Done reconstruction 2.");
   trace_verbose_print("Registering Transition Function");
   trace_verbose_print("  Reconstruction 3...");
   lv_6 = ite(v2, true, lv_3);   % 4
   lv_7 = ite(v0, lv_6, true);   % 5
   trace_verbose_print("  Done reconstruction 3.");
   trace_verbose_print("Registering Invariant");
   trace_verbose_print("Done inital registeration.");
   trace_verbose_print("Ordering and clustering partitions...");
   lv_8 = vars_curr_to_next(lv_2);   % 4
   are_equal(lv_7, false);   % 0
   are_equal(lv_7, true);   % 0
   lv_9 = support_vars(lv_7);   % 5
   lv_10 = exists(lv_4, lv_9);   % 4
   lv_11 = exists(lv_2, lv_9);   % 3
   trace_verbose_print("  Initial merging...");
   trace_verbose_print("  Done initializing partitions...");
   trace_verbose_print("  Ordering/Clustering for Image computationd...");
   trace_verbose_print("    Ordering partitions...");
   lv_12 = and(true, lv_11);   % 3
   lv_13 = and(v0, true);   % 3
   lv_14 = and(v2, lv_13);   % 4
   trace_verbose_print("    Done ordering partitions...");
   trace_verbose_print("    Clustering partitions...");
   trace_verbose_print("    Done clustering partitions.");
   are_equal(lv_7, false);   % 0
   are_equal(lv_7, true);   % 0
   lv_15 = support_vars(lv_7);   % 5
   lv_16 = exists(lv_4, lv_15);   % 4
   lv_17 = exists(lv_2, lv_15);   % 3
   trace_verbose_print("  Initial merging...");
   trace_verbose_print("  Done initializing partitions...");
   trace_verbose_print("  Ordering/Clustering for PreImage computation...");
   trace_verbose_print("    Ordering partitions...");
   lv_18 = and(true, lv_16);   % 4
   lv_19 = and(v3, true);   % 3
   trace_verbose_print("    Done ordering partitions...");
   trace_verbose_print("    Clustering partitions...");
   trace_verbose_print("    Done clustering partitions.");
   lv_20 = and(true, lv_7);   % 5
   lv_21 = restrict(lv_20, true);   % 5
   trace_verbose_print("Done ordering and clustering partitions.");
   check_point_for_force_reordering(0);
   trace_verbose_print("Compute reachable...");
   are_equal(lv_5, false);   % 0
   lv_22 = and(lv_5, true);   % 3
   lv_23 = rel_prod(lv_2, lv_21, lv_22);   % 1
   lv_24 = vars_next_to_curr(lv_23);   % 1
   lv_25 = or(lv_5, lv_24);   % 1
   lv_26 = not(lv_5);   % 3
   lv_27 = and(lv_25, lv_26);   % 3
   are_equal(lv_27, false);   % 0
   lv_28 = and(lv_27, true);   % 3
   lv_29 = rel_prod(lv_2, lv_21, lv_28);   % 1
   lv_30 = vars_next_to_curr(lv_29);   % 1
   lv_31 = or(lv_25, lv_30);   % 1
   lv_32 = not(lv_25);   % 1
   lv_33 = and(lv_31, lv_32);   % 1
   are_equal(lv_33, false);   % 1
   trace_verbose_print("Done compute reachable.");
   trace_verbose_print("Compute fair states...");
   trace_verbose_print("  Compute EG...");
   lv_34 = and(true, true);   % 1
   lv_35 = and(lv_34, true);   % 1
   lv_36 = vars_curr_to_next(lv_35);   % 1
   lv_37 = rel_prod(lv_4, lv_21, lv_36);   % 1
   lv_38 = and(lv_37, lv_31);   % 1
   lv_39 = and(lv_34, lv_38);   % 1
   are_equal(lv_39, true);   % 1
   trace_verbose_print("  Done Computing EG.");
   trace_verbose_print("Done computing fair states.");
   trace_verbose_print("Checking spec...");
   lv_40 = not(lv_1);   % 3
   trace_verbose_print("  Compute EG...");
   are_equal(lv_40, false);   % 0
   lv_41 = and(lv_40, true);   % 3
   lv_42 = and(lv_41, lv_39);   % 3
   lv_43 = and(lv_42, true);   % 3
   lv_44 = vars_curr_to_next(lv_43);   % 3
   lv_45 = rel_prod(lv_4, lv_21, lv_44);   % 4
   lv_46 = and(lv_45, lv_31);   % 4
   lv_47 = and(lv_41, lv_46);   % 4
   are_equal(lv_47, lv_40);   % 0
   lv_48 = and(lv_47, true);   % 4
   lv_49 = and(lv_48, lv_39);   % 4
   lv_50 = and(lv_49, true);   % 4
   lv_51 = vars_curr_to_next(lv_50);   % 4
   lv_52 = rel_prod(lv_4, lv_21, lv_51);   % 4
   lv_53 = and(lv_52, lv_31);   % 4
   lv_54 = and(lv_48, lv_53);   % 4
   are_equal(lv_54, lv_47);   % 1
   trace_verbose_print("  Done Computing EG.");
   lv_55 = not(lv_54);   % 4
   trace_verbose_print("  Reconstruction 4...");
   lv_56 = ite(v0, true, false);   % 3
   trace_verbose_print("  Done reconstruction 4.");
   lv_57 = not(lv_56);   % 3
   lv_58 = or(lv_57, lv_55);   % 1
   lv_59 = not(lv_58);   % 1
   lv_60 = and(lv_59, lv_39);   % 1
   lv_61 = and(lv_60, lv_31);   % 1
   are_equal(true, lv_59);   % 0
   trace_verbose_print("    Compute EU...");
   are_equal(lv_61, false);   % 1
   trace_verbose_print("    Done computing EU.");
   lv_62 = not(lv_61);   % 1
   lv_63 = not(lv_62);   % 1
   lv_64 = and(true, lv_63);   % 1
   lv_65 = and(lv_5, lv_64);   % 1
   are_equal(false, false);   % 1
ENDMODULE
